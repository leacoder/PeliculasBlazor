<li>
    <div class="item-container">
        @if (Folder.SubFolders.Any())
        {
            @if (Folder.IsExpanded)
            {
                <span class="oi oi-arrow-top" aria-hidden="true" style="transform: rotate(180deg)" 
                    @onclick="ToggleGroup"></span>
                @if(Folder.Files.Any())
                {
                    <li>
                    @foreach(var file in Folder.Files)
                    {
                        <div class="item-container">
                        <div style="display: inline-block" @onclick="ToggleGroup">
                            <span class="oi oi-file" aria-hidden="true"></span>
                            <div style="display: inline-block">@file</div>
                        </div>
                        </div>
                    }
                    </li>
                } 
            }
            else
            {
                <span class="oi oi-arrow-top" aria-hidden="true" style="transform: rotate(90deg)" 
                    @onclick="ToggleGroup"></span>
            }
        }

        <span class="oi oi-arrow-top" aria-hidden="true"
         style="cursor: pointer; 
                 @(Folder.SubFolders.Any() ? "" : "padding-left: 18px")
                 @(allEntriesSelected ? "check_box" : "check_box_outline_blank")"></span> 

        <div style="display: inline-block" @onclick="ToggleGroup">
            <span class="oi oi-folder" aria-hidden="true"></span>
            <div style="display: inline-block">@Folder.Name</div>


        </div>
    </div>

    @if (Folder.SubFolders.Any() && Folder.IsExpanded)
    {
        <ul>
        @foreach (var subFolder in Folder.SubFolders)
        {
            <GroupItemComponent Folder="subFolder"/>

        }
        </ul>
    }
</li>

@code {
    [Parameter] public Folder Folder { get; set; }

    public bool allEntriesSelected { get; set; }

    async Task ToggleGroup()
    {
        Folder.IsExpanded = !Folder.IsExpanded;
    }
}
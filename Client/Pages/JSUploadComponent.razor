@page "/"
@using System.Net.Http.Headers
@inject ILogger<UploadDataBackComponent> Logger
@inject IJSRuntime JS
@inject HttpClient Http
@using System.Text
@using System.Text.Json
@using Telerik.Blazor
@using Telerik.Blazor.Components


<PageTitle>Read structure using javascript</PageTitle>
<p>Read structure using javascript, upload files into C:/TEMP path</p>

<button @onclick="OpenFilePicker" class="btn btn-primary">Open Directory Picker</button>

<br/><br/>
<container>
<TelerikTreeView Data="@HierarchicalData" @bind-ExpandedItems="@ExpandedItems" SelectionMode="@TreeViewSelectionMode.Single"
                 @bind-SelectedItems="@SelectedItems">
    <TreeViewBindings>
        <TreeViewBinding TextField="FolderName" ItemsField="Children"></TreeViewBinding>   
        @*<TreeViewBinding Level="1" TextField="Name"></TreeViewBinding>*@
    </TreeViewBindings>
</TelerikTreeView>

@if (SelectedItems.Any())
{
    TreeItem selectedItem = SelectedItems.FirstOrDefault() as TreeItem;
    <div>
        Selected item: <strong> <TelerikIcon Icon="@selectedItem.Icon" /> @selectedItem.FolderName</strong>
        <ul>
        @foreach (var item in @selectedItem.Children)
        {
            if (item.Type == "file")
            {
                <li>
                    <text>@item.Name.ToString()</text>
                </li>
            }
        }
        </ul>
    </div>
}
</container>

@code {
    public IEnumerable<TreeItem>? HierarchicalData { get; set; }
    public IEnumerable<Object>? ExpandedItems { get; set; }
    public IEnumerable<object>? SelectedItems { get; set; } = new List<object>();

    private async Task OpenFilePicker()
    {
        var dotNetReference = DotNetObjectReference.Create(this);
        var treeDirectory = await JS.InvokeAsync<Trees>("readData", dotNetReference);

        HierarchicalData = treeDirectory.FullTree.ToList();
        ExpandedItems = treeDirectory.FullTree.ToList();
    }

    [JSInvokable]
    public async Task SendChunkToServer(byte[] byteArrayChunk, int fragment, string fileName)
    {
        var success = false;
        int retryTimes = 0;
        using var formFile = new MultipartFormDataContent();
        var fileContent = new StreamContent(new MemoryStream(byteArrayChunk));
        formFile.Add(fileContent, "file", fileName);

        while (!success && retryTimes <= 3 )
        {
            var response = await Http.PostAsync($"Filesave/AppendFile/{fragment}", formFile);
            success = response.Content.ReadFromJsonAsync<bool>().Result;
            if (!success)
                await Task.Delay(100);
            retryTimes++;
        }

        if (!success)
        {
            //show error
        }

    }

    public class Trees
    {
        public List<TreeItem> FolderTree { get; set; } = new List<TreeItem>();
        public List<TreeItem> FullTree { get; set; } = new List<TreeItem>();
    }

    public class TreeItem
    {
        public List<TreeItem> Children { get; set; }
        public string Type { get; set; }
        public string Name { get; set; }
        public string FolderName { get; set; }
        public bool HasChildren { get; set; }
        public int Id { get; set; }
        public string Icon { get; set; }
    }
}
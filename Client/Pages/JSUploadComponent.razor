@page "/foldertreejs"
@using System.Net.Http.Headers
@inject ILogger<UploadDataBackComponent> Logger
@inject IJSRuntime JS
@using Telerik.Blazor
@using Telerik.Blazor.Components

<PageTitle>Read File</PageTitle>

@if (fileHandle is null)
{
    <button @onclick="OpenFilePicker" class="btn btn-primary">Open Directory Picker</button>
}
<br/><br/>
<container>
<TelerikTreeView Data="@HierarchicalData" @bind-ExpandedItems="@ExpandedItems" SelectionMode="@TreeViewSelectionMode.Single"
                 @bind-SelectedItems="@SelectedItems">
    <TreeViewBindings>
        <TreeViewBinding TextField="FolderName" ItemsField="Children"></TreeViewBinding>   
        @*<TreeViewBinding Level="1" TextField="Name"></TreeViewBinding>*@
    </TreeViewBindings>
</TelerikTreeView>


@if (SelectedItems.Any())
{
    TreeItem selectedItem = SelectedItems.FirstOrDefault() as TreeItem;
    <div>
        Selected item: <strong> <TelerikIcon Icon="@selectedItem.Icon" /> @selectedItem.FolderName</strong>
        <ul>
        @foreach (var item in @selectedItem.Children)
        {
            if (item.Type == "file")
            {
                <li>
                    <text>@item.Name.ToString()</text>
                </li>
            }
            
        }
        </ul>
    </div>
}
</container>

@code {

    [JSInvokable]
    public static Task<int[]> ReturnArrayAsync(byte[] datos)
    {
        int algo = 1;
        return Task.FromResult(new int[] { 1, 2, 3 });
    }

    public IEnumerable<TreeItem> HierarchicalData { get; set; }
    public IEnumerable<Object> ExpandedItems { get; set; }
    private string? fileText;
    private FileSystemFileHandle? fileHandle;
    private PermissionState readPermissionState;
    private PermissionState writePermissionState;

    private async Task OpenFilePicker()
    {
        var treeDirectory = await JS.InvokeAsync<Trees>("readData");

        //Console.WriteLine("Console blazor");
        //TreeItem[] treeDirectory = JsonSerializer.Deserialize<TreeItem[]>(result);

        var resuult = treeDirectory.FullTree[0].Children[3].Content;

        using var content =  new MultipartFormDataContent();


        HierarchicalData = treeDirectory.FullTree.ToList();

        //var FolderData = treeDirectory.Where(x => x.Type == "directory").SelectMany(x => x.Children);
        ExpandedItems = treeDirectory.FullTree.ToList();


        //var fileContent = new StreamContent(treeDirectory[2].Content);

        //fileContent.Headers.ContentType = new MediaTypeHeaderValue(treeDirectory[2].Type);

        //files.Add(new() { Name = treeDirectory[2].Name });

        //content.Add(
        //    content: fileContent,
        //    name: "\"files\"",
        //    fileName: treeDirectory[2].Name);
    }

    public class Trees
    {
        public TreeItem[] FolderTree { get; set; }
        public TreeItem[] FullTree { get; set; }
    }

    public class TreeItem
    {
        public string Type { get; set; }
        public string Name { get; set; }
        public string FolderName { get; set; }
        public bool HasChildren { get; set; }
        public int Id { get; set; }
        public string Text { get; set; }
        public string Icon { get; set; }
        public int? Parent { get; set; }
        public byte[] Content { get; set; }
        public TreeItem[] Children { get; set; }
    }
    public IEnumerable<object> SelectedItems { get; set; } = new List<object>();

    //public T ToObject<T>(this JsonElement element)
    //{
    //    var json = element.GetRawText();
    //    return JsonSerializer.Deserialize<T>(json);
    //}

}

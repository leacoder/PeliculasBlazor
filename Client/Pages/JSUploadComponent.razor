@page "/foldertreejs"
@using System.Net.Http.Headers
@inject ILogger<UploadDataBackComponent> Logger
@inject IJSRuntime JS
@using System.Text
@using Telerik.Blazor
@using Telerik.Blazor.Components

<PageTitle>Read File from JS</PageTitle>

<button @onclick="OpenFilePicker" class="btn btn-primary">Open Directory Picker</button>

<br/><br/>
<container>
<TelerikTreeView Data="@HierarchicalData" @bind-ExpandedItems="@ExpandedItems" SelectionMode="@TreeViewSelectionMode.Single"
                 @bind-SelectedItems="@SelectedItems">
    <TreeViewBindings>
        <TreeViewBinding TextField="FolderName" ItemsField="Children"></TreeViewBinding>   
        @*<TreeViewBinding Level="1" TextField="Name"></TreeViewBinding>*@
    </TreeViewBindings>
</TelerikTreeView>


@if (SelectedItems.Any())
{
    TreeItem selectedItem = SelectedItems.FirstOrDefault() as TreeItem;
    <div>
        Selected item: <strong> <TelerikIcon Icon="@selectedItem.Icon" /> @selectedItem.FolderName</strong>
        <ul>
        @foreach (var item in @selectedItem.Children)
        {
            if (item.Type == "file")
            {
                <li>
                    <text>@item.Name.ToString()</text>
                    @*<text>@item.Size.ToString()</text>*@
                </li>
            }
        }
        </ul>
    </div>
}

</container>

@code {
    public IEnumerable<TreeItem> HierarchicalData { get; set; }
    public IEnumerable<Object> ExpandedItems { get; set; }
    private string? fileText;
    public IEnumerable<object> SelectedItems { get; set; } = new List<object>();


    private async Task OpenFilePicker()
    {
        var treeDirectory = await JS.InvokeAsync<Trees>("readData");

        //Console.WriteLine("Console blazor");
        //TreeItem[] treeDirectory = JsonSerializer.Deserialize<TreeItem[]>(result);

        //var biteArray = treeDirectory.FullTree[0].Children[0].Content;

        foreach (var item in treeDirectory.FullTree.First().Children)
        {
            DownloadFile(item.Name,  Encoding.Default.GetString(item.Content) );    
        }

        HierarchicalData = treeDirectory.FullTree.ToList();

        //var FolderData = treeDirectory.Where(x => x.Type == "directory").SelectMany(x => x.Children);
        ExpandedItems = treeDirectory.FullTree.ToList();


        //var fileContent = new StreamContent(treeDirectory[2].Content);

        //fileContent.Headers.ContentType = new MediaTypeHeaderValue(treeDirectory[2].Type);

        //files.Add(new() { Name = treeDirectory[2].Name });

        //content.Add(
        //    content: fileContent,
        //    name: "\"files\"",
        //    fileName: treeDirectory[2].Name);
    }

    public async void DownloadFile(string fileName, string content)
    {
         var algo = await JS.InvokeAsync<object>("saveFile", fileName, content); 
    }

    public class Trees
    {
        public List<TreeItem> FolderTree { get; set; }
        public List<TreeItem> FullTree { get; set; }
    }

    public class TreeItem
    {
        public List<TreeItem> Children { get; set; }
        public string Type { get; set; }
        public string Name { get; set; }
        public string FolderName { get; set; }
        public bool HasChildren { get; set; }
        public int Id { get; set; }
        public string Text { get; set; }
        public string Icon { get; set; }
        public int? Parent { get; set; }
        public byte[] Content { get; set; }        
    }
    

}

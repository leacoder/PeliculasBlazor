@page "/"
@using System.Text
@inject FileSystemAccessService FileSystemAccessService;
@using BlazorApp1.Shared

<h3>Folder Tree Component</h3>

<button @onclick="OpenDictoryPicker">Open Directory Picker</button>
<br />
<div class="container">
    <div class="row">
        <div class="col-sm">
            <FolderTreeComponent Folders="@Folders" />
        </div>
        <div class="col-sm">
            <TelerikTreeView Data="@FlatFolders"
                             @bind-ExpandedItems="@ExpandedItems"
                             SelectionMode="@SelectionMode">
                <TreeViewBindings>
                    <TreeViewBinding ParentIdField="Parent"></TreeViewBinding>
                </TreeViewBindings>
            </TelerikTreeView>
        </div>
    </div>
</div>

@code {
    public TreeViewSelectionMode SelectionMode { get; set; } = TreeViewSelectionMode.Multiple;
    public IEnumerable<object> ExpandedItems { get; set; }
    private FileSystemDirectoryHandle? directoryHandle = null;
    private int entitiesChecked = 0;
    private Entity rootEntity = new(FileSystemHandleKind.Directory, null);

    protected async Task OpenDictoryPicker()
    {
        try
        {
            var options = new DirectoryPickerOptionsStartInFileSystemHandle();
            directoryHandle = await FileSystemAccessService.ShowDirectoryPickerAsync(options);
        }
        catch (JSException ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            if (directoryHandle != null)
            {
                //Create folder base
                var directoryId = 1;
                var directoryBase = new List<Folder>() { new Folder(){ Name = directoryHandle.Name } };
                var directoryFlat = new List<FlatFolder>() { new FlatFolder() { Text = directoryHandle.Name, Id = directoryId, Parent = null, Icon = ElementType.folder.ToString() } };
                var values = await directoryHandle.ValuesAsync();

                entitiesChecked = 0;
                StateHasChanged();
                var queue = new Queue<(Entity entity, FileSystemDirectoryHandle dir, FileSystemHandle value)>();
                foreach (var value in values)
                {
                    if (value.Kind is FileSystemHandleKind.File)
                    {
                        string path = GetPath(directoryBase.First(), value.Name);
                        directoryBase.First().Files.Add( new FileManaged() { Name = value.Name, Path = path });
                        var flatBaseDirectory = directoryFlat.First();
                        directoryFlat.Add(new FlatFolder() { Text = value.Name, Parent = flatBaseDirectory.Id, HasChildren = false, Icon = ElementType.file.ToString() });
                        //var content = File
                    }
                    else if( value.Kind is FileSystemHandleKind.Directory)
                    {
                        directoryBase.First().SubFolders.Add(new Folder() { Name = value.Name, ParentFolder = directoryBase.First()  });
                        var flatBaseDirectory = directoryFlat.First();
                        flatBaseDirectory.HasChildren = true;
                        directoryId++;
                        directoryFlat.Add(new FlatFolder() { Text = value.Name, Parent = flatBaseDirectory.Id, Id = directoryId, Icon = ElementType.folder.ToString() });


                        var entity = new Entity(value.Kind, value);
                        rootEntity.Children.Add(entity);
                        queue.Enqueue((entity, directoryHandle, value));
                    }

                    entitiesChecked++;
                    StateHasChanged();
                }
                while (queue.Count > 0)
                {
                    var (entity, dir, value) = queue.Dequeue();
                    entitiesChecked += 1;
                    if (value.Kind is FileSystemHandleKind.File)
                    {
                        var fileSystemHandle = await dir.GetFileHandleAsync(value.Name);
                        File file = await fileSystemHandle.GetFileAsync();
                        entity.Size = file.Size;
                        //Add file to logic structure
                        //var parentFolder = SearchParentFolders(directoryBase, dir.Name);

                        //string path = GetPath(parentFolder, value.Name);
                        //parentFolder?.Files.Add( new FileManaged() { Name = value.Name } );

                    }
                    else if (value.Kind is FileSystemHandleKind.Directory)
                    {
                        var fileSystemDirectoryHandle = await dir.GetDirectoryHandleAsync(value.Name);

                        var innerValues = await fileSystemDirectoryHandle.ValuesAsync();
                        foreach (var innerValue in innerValues)
                        {
                            var pFolder = SearchParentFolders(directoryBase, value.Name);
                            if (innerValue.Kind is FileSystemHandleKind.File)
                            {
                                string path = GetPath(pFolder, innerValue.Name);
                                pFolder?.Files.Add( new FileManaged() { Name = innerValue.Name, Path = path });
                                var parentFlatId = GetParentId(directoryFlat, value.Name);
                                directoryFlat.Add(new FlatFolder() { Text = innerValue.Name, Parent = parentFlatId, HasChildren = false, Icon = ElementType.file.ToString() });
                            }
                            else
                            {
                                //Add to the logic structure
                                pFolder?.SubFolders.Add(new Folder() { Name = innerValue.Name, ParentFolder = pFolder });
                                directoryId++;
                                var parentFlatId = GetParentId(directoryFlat, value.Name);
                                directoryFlat.Add(new FlatFolder() { Text = innerValue.Name, Parent = parentFlatId, HasChildren = true, Id = directoryId, Icon = ElementType.folder.ToString() });

                                var innerEntity = new Entity(innerValue.Kind, innerValue);
                                entity.Children.Add(innerEntity);

                                queue.Enqueue((innerEntity, fileSystemDirectoryHandle, innerValue));
                            }
                        }
                    }
                    StateHasChanged();
                }
                Folders = directoryBase;
                ExpandedItems = directoryFlat;
                FlatFolders = directoryFlat;
            }
        }
    }

    private int GetParentId(List<FlatFolder> directoryFlat, string directoryName)
    {
        var parentFlatFolder = directoryFlat.First(x => x.Text == directoryName);
        parentFlatFolder.HasChildren = true;

        return parentFlatFolder.Id;
    }

    private string GetPath(Folder folder, string fileName)
    {
        Folder parentFolder = new Folder();
        StringBuilder path = new StringBuilder(  fileName );

        do
        {
            path.Insert(0, $"{folder.Name}/");
            folder = folder.ParentFolder;
        } while (folder != null );

        return path.ToString();
    }

    protected class Entity
    {
        public Entity(FileSystemHandleKind Kind, FileSystemHandle? Handle)
        {
            this.Kind = Kind;
            this.Handle = Handle;
            Children = new();
        }
        public FileSystemHandleKind Kind { get; set; }
        public FileSystemHandle? Handle { get; set; }
        public ulong Size { get; set; }
        public List<Entity> Children { get; set; }
    }

    public List<Folder> Folders { get; set; } = new List<Folder>();
    public List<FlatFolder> FlatFolders { get; set; } = new List<FlatFolder>();

    private Folder? SearchParentFolders(List<Folder> allFolders, string? parentName)
    {
        foreach (var folder in allFolders)
        {
            if (folder.Name == parentName)
            {
                return folder;
            }
            else
            {
                var found = SearchParentFolders(folder.SubFolders, parentName);
                if(found != null)
                {
                    return found;
                }
            }
        }

        return null;
    }
}
